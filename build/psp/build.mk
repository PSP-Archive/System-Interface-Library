#
# System Interface Library for games
# Copyright (c) 2007-2020 Andrew Church <achurch@achurch.org>
# Released under the GNU GPL version 3 or later; NO WARRANTY is provided.
# See the file COPYING.txt for details.
#
# build/psp/build.mk: Build control file for the PSP.
#

#
# PSP-specific notes:
#
# - The executable file is saved as $(EXECUTABLE_NAME).elf (unstripped)
#   and $(EXECUTABLE_NAME).prx (stripped and mangled for the PSP's OS).
#   Note that these filenames are only meaningful locally, and are not
#   reflected in the program package file (EBOOT.PBP).
#
# - Generating coverage data requires the libgcov patch to GCC from the
#   Gentoo psp-gcc package at <http://achurch.org/cgi-bin/hg/portage-psp/>.
#   See the "Built-in tests" section of the README file for details,
#   including where the coverage data files generated by the executable are
#   stored.
#
# -------------------------------------------------------------------------
#
# To use this file, include it in your Makefile after defining values for
# configuration variables and source lists, but before defining any rules.
# For example:
#
# PROGRAM_NAME = MyProgram
# EXECUTABLE_NAME = my-program
#
# MY_SOURCES = my-program.c
# MY_OBJECTS_C = $(MY_SOURCES:$(TOPDIR)/%.c=$(OBJDIR)/%$(OBJECT_EXT))
# OBJECT_GROUPS += MY
# AUTOGEN_HEADERS += my-date.h
#
# include SIL/build/psp/build.mk
#
# .PHONY: my-date.h  # Force regeneration on every build.
# my-date.h:
# 	date +'#define DATE "%Y-%m-%d %H:%M:%S"' >$@
#
#

###########################################################################
################ Defaults for common configuration options ################
###########################################################################

# Don't fill unused memory because it causes a noticeable slowdown on
# big allocations.
SIL_MEMORY_DEBUG_FILL_UNUSED ?= 0

# Disable support for WebM by default to reduce code size.
SIL_MOVIE_INCLUDE_WEBM ?= 0

# Use single-precision floating point in strformat() to avoid pulling in
# double-precision libraries.
SIL_STRFORMAT_USE_FLOATS ?= 1

# Always enable the custom strtof() when using psplibc, since it doesn't
# include a strtof() of its own.  Note that the stock distribution of
# newlib (at least through 1.16.0) does not allow overriding, but this can
# be fixed by adding __attribute__((weak)) to the strtof() definition in
# newlib/libc/stdlib/strtod.c.
SIL_STRTOF_CUSTOM ?= $(USE_PSPLIBC)
SIL_STRTOF_OVERRIDE_LIBRARY ?= $(USE_PSPLIBC)

###########################################################################
################### PSP-specific configuration options ####################
###########################################################################

#---------------------- Build environment pathnames ----------------------#

# $(PSPROOT):  Base directory containing headers and libraries used in
# cross-compilation for the PSP.  This should contain "include/stdio.h"
# and "lib/libc.a", for example.

PSPROOT ?= /usr/psp


# $(PSPSDK):  Directory into which the unofficial SDK from http://ps2dev.org
# has been installed.  This should contain "include/pspuser.h", for example.

PSPSDK ?= $(PSPROOT)/sdk

#----------------------- Program behavior options ------------------------#

# $(GPU_WAIT_ON_FINISH):  If set to 1 (the default), graphics_finish_frame()
# will wait for the GPU to finish rendering before it returns.  If set to
# 0, graphics_finish_frame() will return immediately after queueing the
# draw-complete operation to the GPU, as on other platforms.
#
# This setting defaults to enabled because memory bus contention between
# CPU and GPU can be a significant bottleneck on the PSP when both are
# running simultaneously.  If you disable this setting, make sure to check
# that the change does not hurt performance.

GPU_WAIT_ON_FINISH ?= 1

#------------------------- Build control options -------------------------#

# $(BUILD_PRX):  Set to 1 (the default) to build a .prx executable for
# firmware versions 3.x and later; set to 0 to build a .elf executable for
# earlier firmware versions.  (Even when set to 1, a .elf executable is
# built for use with GDB, but the link options are different.)

BUILD_PRX ?= 1


# $(CXX_CONSTRUCTOR_HACK):  Set to 1 if you're using C++ code and you need
# to allocate memory in the constructor of a statically-defined object.
# See include/SIL/configs/psp.h for details.

CXX_CONSTRUCTOR_HACK ?= 0


# $(MEMORY_POOL_SIZE):  Set to the desired size (in bytes) of the main
# memory pool used for memory allocations.  The default value of -524288
# leaves 512KiB of memory available to the system.
#
# A positive value specifies that the memory pool must be allocated to
# that size.  If the specified amount of memory is not available in a
# contiguous block at startup, the program will abort.
#
# A zero or negative value means to allocate as much as possible while
# leaving at least the given amount of memory available to the system,
# ensuring the system has enough room for things such as thread stacks.
# If a temporary memory pool is also allocated (see MEMORY_POOL_TEMP_SIZE
# below), the size of this pool will take the temporary pool size into
# account; thus if the PSP has 20MiB of available memory, these defaults
# will give a main pool size of 19MiB (or the size of the largest
# contiguous free block, whichever is smaller).
#
# Values will be rounded away from zero to the next multiple of 4096 bytes.

MEMORY_POOL_SIZE ?= -524288


# $(MEMORY_POOL_TEMP_SIZE):  Set to the desired size (in bytes) of the
# memory pool used for temporary (MEM_ALLOC_TEMP) memory allocations.
# This value must be either positive or zero; if zero, no temporary pool
# will be created, and temporary allocations will go to the main pool.
#
# The temporary pool is typically used for allocations with short
# lifetimes, such as temporary buffers.  Since the PSP does not have a
# virtual memory space, use of a separate pool can help reduce memory
# fragmentation.
#
# Like $(MEMORY_POOL_SIZE), this value will be rounded up to the next
# multiple of 4096 bytes.

MEMORY_POOL_TEMP_SIZE ?= 524288


# $(REPLACE_MALLOC):  Set to 1 to replace the standard malloc() family of
# functions with versions that call the SIL mem_*() functions.  This is
# enabled by default if the SIL_MOVIE_INCLUDE_WEBM option is enabled (since
# the associated libraries call malloc()); otherwise, it defaults to
# disabled to reduce code size.
#
# If SIL_MEMORY_FORBID_MALLOC is disabled (thus allowing SIL client code to
# call malloc()), these replacements are always enabled.

REPLACE_MALLOC ?= $(or $(filter 1,$(SIL_MOVIE_INCLUDE_WEBM)),0)
ifneq (1,$(SIL_MEMORY_FORBID_MALLOC))
override REPLACE_MALLOC = 1
endif


# $(STACK_SIZE):  Set to the size (in bytes) of the stack to allocate for
# the main thread of the program.

STACK_SIZE ?= 131072


# $(USE_PSPLIBC):  Set to 1 to link in the minimal "psplibc" library
# included in the unofficial PSP SDK rather than the full Newlib library.
# This reduces the executables's size in memory by about 64k, but some
# standard library functions (notably much of stdio) will not be available.

USE_PSPLIBC ?= 0

#--------------------------- Packaging options ---------------------------#

# $(ICON0_PNG):  Set this to the PNG image to the icon image (ICON0.PNG)
# to use in the PSP game menu and as the default icon for save files.
# The image must be 144x80 pixels in size (though this is not checked).
#
# If this is set, $(ICON0_SOURCE_PNG) and related variables (see below)
# are ignored.

ICON0_PNG ?=


# $(ICON0_SOURCE_*):  Set these instead of ICON0_PNG to extract part (or all) of
# a PNG source image, resize it to 144x80 pixels, and save it as the
# ICON0.PNG image for the
# and the region within that file for the icon used in the PSP game menu as well as the user settings ("system data") and
# achievements files in the save data folder.  The specified portion of
# the image (left/top/width/height) will be extracted from the PNG file,
# resized to 144x80 pixels, and used as the icon.  The Netpbm package must
# be installed and available on the standard executable path.  Example:
#
#    ICON0_SOURCE_PNG    = icon.png
#    ICON0_SOURCE_LEFT   = 16
#    ICON0_SOURCE_TOP    = 20
#    ICON0_SOURCE_WIDTH  = 288
#    ICON0_SOURCE_HEIGHT = 160
#
# If both ICON0_PNG and ICON0_SOURCE_PNG are empty (the default), no icon
# will be installed.

ICON0_SOURCE_PNG    ?=
ICON0_SOURCE_LEFT   ?= 0
ICON0_SOURCE_TOP    ?= 0
ICON0_SOURCE_WIDTH  ?= 144
ICON0_SOURCE_HEIGHT ?= 80


# $(USE_64MB):  Set this to 1 to request access to the full 64MB of RAM
# available in the PSP-2000 (Slim) and later models.  Only works with
# versions of the OS that support this feature.

USE_64MB ?= 0

###########################################################################
######################### Build environment setup #########################
###########################################################################

_THISDIR := $(abspath $(dir $(lastword $(MAKEFILE_LIST))))

include $(_THISDIR)/../common/base.mk
include $(_THISDIR)/../common/config.mk


ifneq (,$(filter undefined default,$(origin CC)))
CC = psp-gcc
endif

OBJECT_EXT  = .o
LIBRARY_EXT = .a

SYS_CFLAGS    = -G0 -I'$(PSPSDK)/include'
SYS_CXXFLAGS  = -G0 -I'$(PSPSDK)/include'
SYS_OBJCFLAGS = -G0 -I'$(PSPSDK)/include'
SYS_ASFLAGS   = -pipe -I'$(PSPSDK)/include'
SYS_LDFLAGS   = $(if $(filter 1,$(BUILD_PRX)),$(PRX_LDFLAGS)) \
                -L$(PSPSDK)/lib
PRX_LDFLAGS = -specs=$(PSPSDK)/lib/prxspecs -Wl,-q,-T$(PSPSDK)/lib/linkfile.prx

BASE_LIBS     = $(-lstdc++) -lm $(-lc) \
                -lpspaudio -lpspaudiocodec -lpspctrl -lpspdisplay -lpspge \
                -lpspmpeg -lpsppower -lpsprtc -lpsputility -lpspuser
-lstdc++ := $(if $(filter 1,$(SIL_LINK_CXX_STL)),-lstdc++)
-lc := $(if $(filter 1,$(USE_PSPLIBC)),-lpsplibc,-lc)

include $(_THISDIR)/../common/toolchain.mk

# psp-g++ is ancient and doesn't understand -std=c++11.
CFLAG_STD_CXX11 = -std=c++0x


# Definitions used only in this file.
EXECUTABLE_EXT      = $(if $(filter 1,$(BUILD_PRX)),.prx,.elf)

###########################################################################
################# Source file lists and associated flags ##################
###########################################################################

SIL_SYS_CONFIG_HEADER = psp.h

SIL_SYS_SOURCES = sysdep/misc/sysfont-none.c \
                  sysdep/psp/condvar.c \
                  sysdep/psp/debug.c \
                  $(if $(filter 1,$(BUILD_PRX)),sysdep/psp/exports.c) \
                  sysdep/psp/file-read.c \
                  sysdep/psp/files.c \
                  sysdep/psp/framebuffer.c \
                  sysdep/psp/ge-util/base.c \
                  sysdep/psp/ge-util/draw.c \
                  sysdep/psp/ge-util/light.c \
                  sysdep/psp/ge-util/list.c \
                  sysdep/psp/ge-util/matrix.c \
                  sysdep/psp/ge-util/misc.c \
                  sysdep/psp/ge-util/state.c \
                  sysdep/psp/ge-util/texture.c \
                  sysdep/psp/ge-util/vertex.c \
                  sysdep/psp/graphics.c \
                  sysdep/psp/input.c \
                  sysdep/psp/lalloc.c \
                  sysdep/psp/log.c \
                  sysdep/psp/main.c \
                  sysdep/psp/malloc.c \
                  sysdep/psp/memory.c \
                  sysdep/psp/memory-low.c \
                  sysdep/psp/misc.c \
                  sysdep/psp/movie.c \
                  sysdep/psp/mutex.c \
                  sysdep/psp/profile.c \
                  sysdep/psp/quickpng.c \
                  sysdep/psp/semaphore.c \
                  sysdep/psp/sound.c \
                  sysdep/psp/sound-low.c \
                  sysdep/psp/sound-mp3.c \
                  $(if $(filter 1,$(USE_PSPLIBC)),sysdep/psp/stdio.c) \
                  $(if $(filter 1,$(USE_PSPLIBC)),sysdep/psp/stdlib.c) \
                  sysdep/psp/stubs.S \
                  sysdep/psp/texture.c \
                  sysdep/psp/thread.c \
                  sysdep/psp/time.c \
                  sysdep/psp/userdata.c \
                  $(if $(filter 1,$(SIL_INCLUDE_TESTS)), \
                      test/sysdep/psp/files.c \
                      test/sysdep/psp/font.c \
                      test/sysdep/psp/graphics.c \
                      test/sysdep/psp/input.c \
                      test/sysdep/psp/misc.c \
                      test/sysdep/psp/movie.c \
                      test/sysdep/psp/sound-mp3.c \
                      test/sysdep/psp/texture.c \
                      test/sysdep/psp/time.c \
                      test/sysdep/psp/userdata.c \
                  )

SIL_SYS_FLAGS = \
    $(CFLAG_DEFINE)_PSP_FW_VERSION=100 \
    $(call _if-define,CXX_CONSTRUCTOR_HACK,SIL_PLATFORM_PSP_CXX_CONSTRUCTOR_HACK) \
    $(call _if-define,GPU_WAIT_ON_FINISH,SIL_PLATFORM_PSP_GPU_WAIT_ON_FINISH) \
    $(CFLAG_DEFINE)SIL_PLATFORM_PSP_MEMORY_POOL_SIZE=$(MEMORY_POOL_SIZE) \
    $(CFLAG_DEFINE)SIL_PLATFORM_PSP_MEMORY_POOL_TEMP_SIZE=$(MEMORY_POOL_TEMP_SIZE) \
    $(CFLAG_DEFINE)SIL_PLATFORM_PSP_MODULE_NAME='"$(PROGRAM_NAME)"' \
    $(call _if-define,REPLACE_MALLOC,SIL_PLATFORM_PSP_REPLACE_MALLOC) \
    $(CFLAG_DEFINE)SIL_PLATFORM_PSP_STACK_SIZE=$(STACK_SIZE)

include $(_THISDIR)/../common/sources.mk

#-------------------------------------------------------------------------#

# Work around a bogus warning in nestegg reported by GCC 4.5.x.
SIL_nestegg_CFLAGS += -Wno-uninitialized

#-------------------------------------------------------------------------#

# We move malloc.o and (if compiled in) std{io,lib}.o to immediately before
# libc so that all references to them are resolved before libc is loaded,
# thus preventing any of libc's stdio symbols from colliding with ours.
# (Unfortunately, we can't do this with utility/strtof.o because strtof()
# is defined in the same file as strtod() in Newlib, which means it's
# automatically pulled in by any strtod() references.)

LIBC_OBJECTS = $(patsubst $(TOPDIR)%,$(OBJDIR)%, \
    $(SIL_DIR)/src/sysdep/psp/malloc.o \
    $(SIL_DIR)/src/sysdep/psp/stdio.o \
    $(SIL_DIR)/src/sysdep/psp/stdlib.o)
OBJECTS_AND_LIBS = \
    $(filter-out $(LIBC_OBJECTS),$(ALL_OBJECTS)) \
    $(subst $(-lc),$(filter $(LIBC_OBJECTS),$(ALL_OBJECTS)) $(-lc),$(ALL_LIBS) $(BASE_LIBS) $(LIBS))

###########################################################################
############################### Build rules ###############################
###########################################################################

ifneq ($(EXECUTABLE_NAME),)
SIL_HELP_all           = 'build the program package (EBOOT.PBP)'
SIL_HELP_binary        = 'build just the binary ($(EXECUTABLE_NAME)$(EXECUTABLE_EXT))'
endif
SIL_HELP_gen-coverage  = 'generate coverage.out from coverage data'
SIL_HELP_coverage-html = 'generate HTML coverage results from coverage.out'
SIL_HELP_clean         = 'remove all intermediate files and dependency data'
SIL_HELP_spotless      = 'remove all generated files, including program/package files'
define SIL_HELPTRAILER
echo ''
echo 'Using PSP cross-platform root (PSPROOT):  $(PSPROOT)'
echo 'Using PSP SDK installation path (PSPSDK): $(PSPSDK)'
echo ''
endef

include $(_THISDIR)/../common/rules.mk

#-------------------------------------------------------------------------#

.PHONY: all binary clean spotless tools

ifneq ($(EXECUTABLE_NAME),)

all: EBOOT.PBP $(RESOURCES)

binary: $(EXECUTABLE_NAME)$(EXECUTABLE_EXT)

endif

clean:
	$(ECHO) 'Removing object files'
	$(Q)rm -rf obj
	$(ECHO) 'Removing temporary files'
	$(Q)rm -rf ICON0-alpha.pnm .covtmp
	$(SIL_RECIPE_clean)

spotless: clean
ifneq ($(EXECUTABLE_NAME),)
	$(ECHO) 'Removing executable file and autogenerated resources'
	$(Q)rm -rf $(EXECUTABLE_NAME).elf $(EXECUTABLE_NAME).prx PARAM.SFO ICON0.PNG EBOOT.PBP
endif
	$(ECHO) 'Removing coverage data'
	$(Q)rm -rf coverage coverage.out
	$(_SIL_TOOLS_RECIPE_spotless)
	$(SIL_RECIPE_spotless)

#-------------------------------------------------------------------------#

ifneq ($(EXECUTABLE_NAME),)

EBOOT.PBP: $(EXECUTABLE_NAME)$(EXECUTABLE_EXT) PARAM.SFO $(if $(or $(ICON0_PNG),$(ICON0_SOURCE_PNG)),ICON0.PNG)
	$(ECHO) 'Packing $@'
	$(Q)pack-pbp $@ PARAM.SFO $(if $(or $(ICON0_PNG),$(ICON0_SOURCE_PNG)),ICON0.PNG,NULL) NULL NULL NULL NULL $(EXECUTABLE_NAME)$(EXECUTABLE_EXT) NULL

$(EXECUTABLE_NAME).prx: $(EXECUTABLE_NAME).elf
	$(ECHO) 'Creating $@'
	@# psp-prxgen doesn't return an error code on failure, so remove the
	@# target file first and check for existence afterward.
	$(Q)rm -f '$@'
	$(Q)psp-prxgen '$<' '$@'
	$(Q)test -f '$@'

# Sort objects in lexical order to make it easier to estimate build progress.
$(EXECUTABLE_NAME).elf: $(sort $(ALL_OBJECTS))
	$(ECHO) 'Linking $@'
	@# This must be $(CC) to avoid link errors even when compiling C++
	@# code, because $(CXX) tries to pull in stdio no matter what we do.
	$(Q)$(CC) \
	    $(filter-out -static-libstdc++,$(BASE_LDFLAGS) $(ALL_LDFLAGS) $(LDFLAGS)) \
	    $(OBJECTS_AND_LIBS) \
	    $(CFLAG_LINK_OUTPUT)'$@'
	$(Q)psp-fixup-imports '$@'

endif  # ifneq ($(EXECUTABLE_NAME),)

PARAM.SFO: $(MAKEFILE_DEPS)
	$(ECHO) 'Generating $@'
	$(Q)mksfoex $(if $(filter 1,$(USE_64MB)),-d MEMSIZE=1) '$(PROGRAM_NAME)' '$@'

ifneq ($(ICON0_PNG),)
ICON0.PNG: $(ICON0_PNG)
	$(ECHO) 'Copying $@ from $<'
	$(Q)cp -p '$<' '$@'
else ifneq ($(ICON0_SOURCE_PNG),)
ICON0.PNG: $(ICON0_SOURCE_PNG) ICON0-alpha.pnm $(MAKEFILE_DEPS)
	$(ECHO) 'Generating $@'
	$(Q)pngtopnm <'$<' \
		| pamcut $(ICON0_SOURCE_LEFT) $(ICON0_SOURCE_TOP) $(ICON0_SOURCE_WIDTH) $(ICON0_SOURCE_HEIGHT) \
		| pamscale -width=144 -height=80 \
		| pnmtopng -alpha=ICON0-alpha.pnm -compression=9 \
		>'$@'

ICON0-alpha.pnm: $(ICON0_SOURCE_PNG) $(MAKEFILE_DEPS)
	$(Q)pngtopnm -alpha <'$<' \
		| pamcut $(ICON0_LEFT) $(ICON0_TOP) $(ICON0_WIDTH) $(ICON0_HEIGHT) \
		| pamscale -width=144 -height=80 \
		>'$@'
endif

#-------------------------------------------------------------------------#

# sysdep/psp/exports.c can be regenerated from exports.exp if necessary.
$(SIL_DIR)/src/sysdep/psp/exports.c: $(SIL_DIR)/src/sysdep/psp/exports.exp
	$(ECHO) 'Regenerating $@'
	$(Q)psp-build-exports -b '$<' >'$@'

###########################################################################
###########################################################################
