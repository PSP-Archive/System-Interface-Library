#
# System Interface Library for games
# Copyright (c) 2007-2020 Andrew Church <achurch@achurch.org>
# Released under the GNU GPL version 3 or later; NO WARRANTY is provided.
# See the file COPYING.txt for details.
#
# build/android/build.mk: Build control file for Android.
#

#
# Android-specific notes:
#
# - The final package file is named "$(EXECUTABLE_NAME).apk".  The native
#   code object itself (stored in the .apk package) is always named
#   "libnative.so".
#
# - $(PROGRAM_VERSION_CODE) is used as the android:versionCode attribute
#   value in the AndroidManifest.xml file, and it must be a single positive
#   integer (not a dot-separated version number).
#
# - If $(SDK_VERSION) is set, it must be the numeric version ID of the SDK,
#   not the version name: for example, SDK 6.0 is version 23, so specify
#   SDK_VERSION = 23 (not 6.0 or Marshmallow, for example).  Defaults to
#   the most recent version available in $(ANDROID_HOME)/platforms, but
#   fails if version 23 or newer is not available.
#
#   Note that it's possible to _target_ versions of Android back to Android
#   2.3.3 Gingerbread (SDK version 10), but SIL programs must be _built_
#   using the version 23 SDK or later.  Some features will not be available
#   in older OS versions; see the $(TARGET_OS_VERSION) description below.
#
# - $(TARGET_OS_VERSION) likewise refers to the SDK version number
#   corresponding to the target OS version, not the OS version string or
#   code name.  The default is 10 (Android 2.3.3 Gingerbread). This
#   corresponds to the "minSdkVersion" attribute in AndroidManifest.xml;
#   for the "targetSdkVersion" attribute, see the Android-specific
#   variable TARGET_OS_VERSION_COMPAT, defined below.
#
#   Note that some functionality is not available on older OS versions:
#      - Full game controller support requires Android 3.1 (Honeycomb MR1)
#           or later, except that the Xperia Play built-in gamepad is
#           supported back to Android 2.3.3 (Gingerbread).
#
# - $(TARGET_ARCH_ABI) is honored, and the following values are currently
#   recognized:
#      all all32 all64 armeabi-v7a arm64-v8a mips mips64 x86 x86_64
#   The special value "all" (which is the default) will build for all
#   architectures supported by the selected NDK version; "all32" selects
#   all 32-bit architectures (armeabi-v7a, mips, x86); and "all64" selects
#   all 64-bit architectures (arm64-v8a, mips64, x86_64).  Other values
#   will cause an error at build time.
#
#   Note that NDK version 17 removed support for MIPS targets.  When using
#   NDK r17 or later, the "all", "all32", and "all64" values omit "mips"
#   and "mips64" from the selected set of architectures.
#

# - This file includes additional rules such as "install", "run", and
#   "test" to simplify running the program on a device from the command
#   line.  View the help text ("make help") for details.
#
# - An additional rule, "pull-coverage", is provided to copy the coverage
#   data generated by a coverage-enabled build (built with COVERAGE=1) from
#   the device to the local host.  This rule also runs the "gen-coverage"
#   rule to merge the coverage data into a "coverage.out" file suitable for
#   using with the "cov-html.pl" tool.  See the "Built-in tests" section of
#   the README file for details.
#
# -------------------------------------------------------------------------
#
# To use this file, include it in your Makefile after defining values for
# configuration variables and source lists, but before defining any rules.
# For example:
#
# PROGRAM_NAME = MyProgram
# EXECUTABLE_NAME = my-program
#
# MY_SOURCES = my-program.c
# MY_OBJECTS_C = $(MY_SOURCES:$(TOPDIR)/%.c=$(OBJDIR)/%$(OBJECT_EXT))
# OBJECT_GROUPS += MY
# AUTOGEN_HEADERS += my-date.h
#
# include SIL/build/android/build.mk
#
# .PHONY: my-date.h  # Force regeneration on every build.
# my-date.h:
# 	date +'#define DATE "%Y-%m-%d %H:%M:%S"' >$@
#
#

###########################################################################
################ Defaults for common configuration options ################
###########################################################################

# We can include libvpx assembly for all architectures, including x86,
# since the NDK includes yasm as of r9d.
SIL_LIBRARY_INTERNAL_LIBVPX_ASM ?= 1
YASM ?= $(HOST_PREBUILT)/yasm

# Work around Android SDK 5.0+ incompatibility with <5.0 devices (see also
# src/sysdep/android/ndk-fix.c).
SIL_STRTOF_CUSTOM ?= 1

###########################################################################
################# Android-specific configuration options ##################
###########################################################################

#----------------------- Program behavior options ------------------------#

# $(ALLOW_LANGUAGE_CHANGE):  If set to 1, the program will not be restarted
# if the system language is changed while the program is running; the
# program is then responsible for switching resources as appropriate for
# the new language.  The default is to restart the program on a language
# change.

ALLOW_LANGUAGE_CHANGE ?= 0


# $(TARGET_ENVIRONMENT):  Sets the specific runtime environment to target.
# The value must be one of the following:
#    - generic: Generic Android, v2.3.3 or later (this is the default)
#    - ouya: OUYA game console only
#    - ouya-generic: OUYA game console plus generic Android support

TARGET_ENVIRONMENT ?= generic

#---------------------- Build environment pathnames ----------------------#

# $(ANDROID_NDK):  Pathname of the Android NDK installation.  If empty, the
# build rules will look for a directory matching "android-ndk-r<version>"
# under $(ANDROID_HOME) where <version> is the NDK version; if there are
# multiple such directories, the one with the highest version number will
# be chosen.

ANDROID_NDK ?=


# $(ANDROID_HOME):  Pathname of the Android SDK installation, containing
# subdirectories such as "platforms" and "tools".  The default is suitable
# for Gentoo Linux systems with the dev-util/android-sdk-update-manager
# package installed.

ANDROID_HOME ?= /opt/android-sdk-update-manager

#------------------------- Build control options -------------------------#

# $(GCOV_PREFIX):  Sets the prefix to which the program will write coverage
# data on exit if built for coverage analysis.  Defaults to
# /mnt/sdcard/coverage if building in debug mode, the empty string (no path
# override) otherwise.

GCOV_PREFIX ?= $(if $(filter 1,$(DEBUG)),/mnt/sdcard/coverage)


# $(USE_ARM_NEON):  If set to 1, builds for the ARM architecture will use
# the NEON SIMD instruction set.  This will prevent the program from
# running on any ARM devices without NEON support.

USE_ARM_NEON ?= 0

#--------------------------- Packaging options ---------------------------#

# $(DEBUGGABLE):  If set to 1, the final package will be debuggable on the
# device using remote GDB.  The default is 1 (debuggable).  This option
# maps directly to the "android:debuggable" manifest attribute.

DEBUGGABLE ?= 1


# $(DOWNLOADER_BASE64_PUBLIC_KEY):  If $(USE_DOWNLOADER) is 1, this must
# be set to the base64-encoded public key to use with the extension file
# downloader for licensing verification.

DOWNLOADER_BASE64_PUBLIC_KEY ?=


# $(DOWNLOADER_SALT):  If $(USE_DOWNLOADER) is 1, this must be set to a
# comma-separated list of 20 byte values (-128 through 127), which will be
# used by the licensing library to obfuscate internal data.

DOWNLOADER_SALT ?=


# $(ICON_PNG):  If not empty, this image will be used as the application
# icon.  The file must be in PNG format, and should be 72x72 pixels.

ICON_PNG ?=


# $(MANIFEST_APPLICATION_EXTRA):  Additional tags to insert into the
# <application> section of the AndroidManifest.xml file.  This should
# normally be left empty.

MANIFEST_APPLICATION_EXTRA ?=


# $(MANIFEST_GLOBAL_EXTRA):  Additional tags to insert into the top level
# of the AndroidManifest.xml file, after the <application> section.  This
# should normally be left empty.

MANIFEST_GLOBAL_EXTRA ?=


# $(OUYA_ICON_PNG):  If not empty, this image will be used as the
# application icon in the OUYA launcher.  The file must be in PNG format,
# and should be 732x412 pixels.

OUYA_ICON_PNG ?=


# $(READ_EXTERNAL_STORAGE):  If set to 1, the application will request the
# READ_EXTERNAL_STORAGE privilege, allowing unrestricted access to read
# data files from the device's external storage partition.  This is useful,
# for example, when storing an application's data files separately from the
# application package during development to reduce the time required to
# install new builds.  This permission does not need to be requested if
# WRITE_EXTERNAL_STORAGE is set to 1, since write permission implies read
# permission.  The default is 0 (the privilege will not be requested).
#
# If you target Android 6.0 or later ($(TARGET_SDK_VERSION) is at least 23),
# you must call android_request_permission(ANDROID_PERMISSION_READ_EXTERNAL_STORAGE)
#
# This flag is ignored when targeting Android 4.3 (SDK level 18) or earlier,
# since these OS versions require the WRITE_EXTERNAL_STORAGE permission to
# access the application's own external data directory (and in any case,
# Android 4.3 and earlier don't enforce this permission).

READ_EXTERNAL_STORAGE ?= 0


# $(SCREEN_ORIENTATION):  Sets the screen orientation requested in the
# application manifest.  Must be either "portrait" or "landscape"; it is
# not currently possible to specify both.

SCREEN_ORIENTATION ?= landscape


# $(SIGN):  If set to 1, the package file (*.apk) will be automatically
# signed.  If 0 or empty, the package must be signed separately before it
# can be installed.

SIGN ?= 0


# $(SIGN_KEYSTORE), $(SIGN_STOREPASS), $(SIGN_KEYPASS), $(SIGN_ALIAS):
# Keystore pathname, passwords, and key alias for signing.  Typically,
# these should only be set in this file (or in a Makefile that includes
# this file) if using a debugging keystore -- under no circumstances
# should you put the password for your real key here!
#
# Use the "keytool" program (typically distributed as part of the JDK) to
# create a certificate and key for signing.  A simple key could be created
# with a command line like the following (all on one line):
#    keytool -genkey -keyalg RSA -keysize 2048 -validity 99999
#       -dname "CN=SIL Debug" -keystore debug.keystore -storepass storepass
#       -keypass keypass -alias debug_key
# See the Android Development Guide under "Publishing: Signing Your
# Applications" for details.
#
# For example:
#    SIGN_KEYSTORE  = debug.keystore
#    SIGN_STOREPASS = storepass
#    SIGN_KEYPASS   = keypass
#    SIGN_ALIAS     = debug_key
# (See the build directory of the sample project for an example of setting
# these values.)

SIGN_KEYSTORE  ?=
SIGN_STOREPASS ?=
SIGN_KEYPASS   ?=
SIGN_ALIAS     ?=


# $(TARGET_OS_VERSION_COMPAT):  Sets the SDK version number to be assigned
# to the AndroidManifest.xml "targetSdkVersion" attribute.  This controls
# which compatibility features are enabled by Android when the application
# is run.  This can typically be left at the default, but in some cases it
# may be useful to deliberately set it lower to work around restrictions
# imposed by newer Android versions.  Note that some app stores may require
# this to be set to a recent SDK version at submission time.
#
# The default value is the SDK version number of the SDK in use.

TARGET_OS_VERSION_COMPAT ?= $(SDK_VERSION)


# $(USE_DOWNLOADER):  If set to 1, the program will download APK expansion
# files from the Google Play servers.  If set to 0 (the default), no
# downloading will be performed.
#
# When the downloader is enabled, SIL will not pass control to your
# sil_main() entry point until all files have been successfully downloaded.

USE_DOWNLOADER ?= 0


# $(WRITE_EXTERNAL_STORAGE):  If set to 1, the application will request the
# WRITE_EXTERNAL_STORAGE privilege, allowing unrestricted access to write
# data files to the device's external storage partition.  The default is 0
# (the privilege will not be requested).
#
# This flag is ignored when targeting Android 4.3 (SDK level 18) or earlier,
# since these OS versions require the WRITE_EXTERNAL_STORAGE permission to
# access the application's own external data directory.

WRITE_EXTERNAL_STORAGE ?= 0

#---------------------- Android manifest attributes ----------------------#

# These variables are derived from the configuration settings above.
# You should not need to change them.

# Value for the android:configChanges attribute.  Note that we need to
# specify both locale and layoutDirection, since Android 4.2 through at
# least 4.2.1 blindly set the layoutDirection bit for any locale change
# regardless of whether there was an actual change in layout direction
# (see the source for the android.content.res.Configuration class).
CONFIG_CHANGES = $(if $(filter 1,$(ALLOW_LANGUAGE_CHANGE)),|locale|layoutDirection)

# Additional declarations needed by the Google Play expansion file downloader.
DOWNLOADER_MANIFEST_GLOBAL = $(if $(filter 1,$(USE_DOWNLOADER)),$(_DOWNLOADER_MANIFEST_GLOBAL))
DOWNLOADER_MANIFEST_ACTIVITY = $(if $(filter 1,$(USE_DOWNLOADER)),$(_DOWNLOADER_MANIFEST_ACTIVITY))
_DOWNLOADER_MANIFEST_GLOBAL = \
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/> \
    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE"/> \
    <uses-permission android:name="com.android.vending.CHECK_LICENSE"/> \
    <uses-permission android:name="android.permission.INTERNET"/>
_DOWNLOADER_MANIFEST_ACTIVITY = \
        <activity android:name=".Downloader"> \
            <intent-filter> \
                <action android:name="android.intent.action.MAIN"/> \
                <category android:name="android.intent.category.LAUNCHER"/> \
            </intent-filter> \
        </activity> \
        <service android:name=".Downloader$$DownloaderService"/> \
        <receiver android:name=".Downloader$$DownloaderService$$AlarmReceiver"/>

# Intent categories for the main activity's intent filter.  We filter out
# the LAUNCHER category if using the downloader (since the downloader will
# take it instead).  Also, some systems (such as the OUYA) look for special
# intents to identify compatible programs.
INTENT_CATEGORIES = $(if $(filter 1,$(USE_DOWNLOADER)),,android.intent.category.LAUNCHER)

# Activity class name which gets invoked to start the program.  If the
# downloader is enabled, we start the Downloader class so it can check
# whether the files have been downloaded before starting the main program.
MAIN_ACTIVITY = $(if $(filter 1,$(USE_DOWNLOADER)),Downloader,SILActivity)

# List of permissions.  We request WRITE_EXTERNAL_STORAGE if building for
# coverage analysis, so the coverage data files can be written to
# $(GCOV_PREFIX) (normally the external storage directory).
PERMISSIONS = $(if $(or $(filter 1,$(COVERAGE)), \
                        $(filter 1,$(WRITE_EXTERNAL_STORAGE))), \
                  WRITE_EXTERNAL_STORAGE, \
                  $(if $(filter 1,$(READ_EXTERNAL_STORAGE)), \
                      READ_EXTERNAL_STORAGE))

# List of permission tags.  If the build does not otherwise request
# WRITE_EXTERNAL_STORAGE but targets Android 4.3 or earlier, we add a
# conditional WRITE_EXTERNAL_STORAGE tag so we can write to the external
# data directory.
MANIFEST_PERMISSIONS = $(foreach i,$(sort $(PERMISSIONS)),<uses-permission android:name="android.permission.$i"/>)
ifeq ($(filter WRITE_EXTERNAL_STORAGE,$(PERMISSIONS)),)
    MANIFEST_PERMISSIONS += $(if $(filter 10 11 12 13 14 15 16 17 18,$(TARGET_OS_VERSION)),<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" android:maxSdkVersion="18"/>)
endif

# Value for the android:screenOrientation attribute (since "portrait" and
# "landscape" mean only a single fixed orientation, rather than both
# relevant orientations).
SCREEN_ORIENTATION_FULL = $(if $(filter landscape,$(SCREEN_ORIENTATION)),sensorLandscape,$(if $(filter portrait,$(SCREEN_ORIENTATION)),sensorPortrait,$(SCREEN_ORIENTATION)))

###########################################################################
############# Setting validation and per-environment defaults #############
###########################################################################

ifeq ($(TARGET_ENVIRONMENT),ouya)

    INTENT_CATEGORIES = tv.ouya.intent.category.GAME

    ifneq ($(SCREEN_ORIENTATION),landscape)
        $(error SCREEN_ORIENTATION must be "landscape" for OUYA)
    endif
    override SCREEN_ORIENTATION_FULL = landscape

    TARGET_OS_VERSION ?= 16

    ifeq ($(USE_DOWNLOADER),1)
        $(error USE_DOWNLOADER must not be set for OUYA)
    endif

else ifeq ($(TARGET_ENVIRONMENT),ouya-generic)

    INTENT_CATEGORIES += tv.ouya.intent.category.GAME

    ifneq ($(SCREEN_ORIENTATION),landscape)
        $(error SCREEN_ORIENTATION must be "landscape" for OUYA)
    endif

    ifeq ($(USE_DOWNLOADER),1)
        $(error USE_DOWNLOADER must not be set for OUYA)
    endif

else ifeq ($(TARGET_ENVIRONMENT),generic)

    ifeq ($(filter landscape portrait,$(SCREEN_ORIENTATION)),)
        $(error Invalid value for SCREEN_ORIENTATION: $(SCREEN_ORIENTATION) (must be "landscape" or "portrait"))
    endif

else

    $(error Invalid value for TARGET_ENVIRONMENT: $(TARGET_ENVIRONMENT) (must be one of: "generic" "ouya" "ouya-generic"))

endif

###########################################################################
##################### Common pathnames and filenames ######################
###########################################################################

# Directory in which this Makefile is contained (equivalent to
# $(SIL_DIR)/build/android).
_THISDIR := $(abspath $(dir $(lastword $(MAKEFILE_LIST))))

#-------------------------------------------------------------------------#

# Directory for dumping temporary files.  Chosen from, in order of
# preference:
#    1) $(TMPDIR), if defined and not empty;
#    2) /tmp, if it exists;
#    3) otherwise, the current directory.
# These files are cleaned up at the conclusion of each rule which creates
# them, but will be left around if a command in the rule fails.
TMP := $(if $(TMPDIR),$(TMPDIR)/,$(if $(wildcard /tmp),/tmp/))

#-------------------------------------------------------------------------#

# If ANDROID_NDK is unset, find the "android-ndk-r*" directory with the
# highest version number and use that as the NDK root path.  The pathname
# could potentially contain spaces, so we use $(shell ls) instead of
# $(wildcard) to check for existence.
ifeq ($(ANDROID_NDK),)
    ANDROID_NDK_PREFIX := $(ANDROID_HOME)/android-ndk-r
    ANDROID_NDK_LATEST := $(shell ls -d '$(ANDROID_NDK_PREFIX)'*/. 2>/dev/null \
                                  | sed -e 's,/\.$$,,; s,^.*/,,; s/android-ndk-r//' \
                                  | sort -n \
                                  | tail -n1)
    ifneq ($(ANDROID_NDK_LATEST),)
        override ANDROID_NDK := $(ANDROID_NDK_PREFIX)$(ANDROID_NDK_LATEST)
    endif
endif

# Filter $(SDK_VERSION) for safety.
ifneq ($(shell echo '$(subst ',_,$(SDK_VERSION))' | grep -q '^[0-9]*$$' && echo ok),ok)
    $(error Invalid value for $$(SDK_VERSION): $(SDK_VERSION))
endif
# If no SDK version was selected, find the most recent one (but at least
# version 23 == Android 6.0, so we have NDK support and all the symbols we
# need).
_SIL_EXPLICIT_SDK_VERSION := $(SDK_VERSION)
ifeq ($(SDK_VERSION),)
    override SDK_VERSION := $(shell \
        ls -d \
            '$(ANDROID_HOME)'/platforms/android-2[3-9] \
            '$(ANDROID_HOME)'/platforms/android-[3-9][0-9] \
            '$(ANDROID_HOME)'/platforms/android-[1-9][0-9][0-9]* \
            2>/dev/null \
        | sed -e 's,.*/,,; s/android-//' \
        | sort -n \
        | tail -n1)
endif

# Path to Android SDK files for the selected SDK version.
ANDROID_SDK := $(ANDROID_HOME)/platforms/android-$(SDK_VERSION)

# Android NDK version.
ANDROID_NDK_VER_FULL := $(or \
    $(firstword $(shell head -n1 '$(ANDROID_NDK)/RELEASE.TXT' 2>/dev/null \
                        | sed -e 's/[^a-z0-9 _-]//g')), \
    $(shell grep '^Pkg.Revision' '$(ANDROID_NDK)/source.properties' \
            | perl -nle 's/.*=\s*(\d+)(?:\.(\d+))?.*/"r$$1".($$2>0 ? chr(97+$$2) : "")/e and print'))
ANDROID_NDK_VERSION := $(shell echo '$(ANDROID_NDK_VER_FULL)' | sed -e 's/-.*//')
ANDROID_NDK_VER_MAJOR := $(shell echo '$(ANDROID_NDK_VERSION)' | sed -e 's/[^0-9]//g')

# If no target architecture/ABI was selected, build for all architectures.
ifeq ($(TARGET_ARCH_ABI),)
    TARGET_ARCH_ABI = all
endif

# If no target OS version was selected, default to the oldest one we support.
TARGET_OS_VERSION ?= 10

# Paths for the Google Play downloader libraries.
LIB_PLAY_LICENSING = $(ANDROID_HOME)/extras/google/play_licensing/library
LIB_PLAY_APK_EXPANSION = $(ANDROID_HOME)/extras/google/play_apk_expansion/downloader_library

# If we're actually building anything, make sure the dev tools were found
# and all build settings are sane.
ifneq ($(filter-out help clean spotless,$(or $(MAKECMDGOALS),default)),)

ifeq ($(shell ls -d '$(ANDROID_HOME)' 2>/dev/null),)
    $(warning --- Android SDK not found at $$(ANDROID_HOME):)
    $(warning ---     $(ANDROID_HOME))
    $(warning --- Rerun make with "ANDROID_HOME=(path-to-android-sdk)".)
    $(error Android SDK not found)
endif

ifeq ($(SDK_VERSION),)
    ifeq ($(wildcard $(ANDROID_HOME)/platforms/android-*),)
        $(warning --- No SDKs found at $$(ANDROID_HOME):)
    else
        $(warning --- No valid SDKs (version 23 or later) found at $$(ANDROID_HOME):)
    endif
    $(warning ---     $(ANDROID_HOME))
    $(warning --- Rerun make with "ANDROID_HOME=(path-to-android-sdk)", or)
    $(warning --- install SDK version 23 or later using the Android SDK Manager.)
    $(error Android SDK not found)
endif

ifeq ($(ANDROID_NDK),)
    $(warning --- No NDK installation found under $$(ANDROID_HOME):)
    $(warning ---     $(ANDROID_HOME))
    $(warning --- Rerun make with "ANDROID_NDK=(path-to-android-ndk)".)
    $(error Android NDK not found)
endif

ifeq ($(shell ls -d '$(ANDROID_NDK)' 2>/dev/null),)
    $(warning --- Android NDK not found at $$(ANDROID_NDK):)
    $(warning ---     $(ANDROID_NDK))
    $(warning --- Rerun make with "ANDROID_NDK=(path-to-android-ndk)".)
    $(error Android NDK not found)
endif

ifneq ($(filter 1 2 3 4 5 6 7 8 9 10 11 12 13,$(ANDROID_NDK_VER_MAJOR)),)
    $(warning --- NDK version ($(ANDROID_NDK_VER_FULL)) is too old!  NDK r14 or later required.)
    $(error Android NDK too old)
endif

ifeq ($(shell ls -d '$(ANDROID_NDK)/platforms/android-$(SDK_VERSION)' 2>/dev/null),)
    ifeq ($(_SIL_EXPLICIT_SDK_VERSION),)
        $(warning --- NDK does not support auto-selected SDK version $(SDK_VERSION)!)
        $(warning --- Looked in: $(ANDROID_NDK)/platforms)
        $(warning --- Rerun make with "SDK_VERSION=(version)" to choose a)
        $(warning --- specific SDK version.)
    else
        $(warning --- NDK does not support requested SDK version $(SDK_VERSION)!)
        $(warning --- Looked in: $(ANDROID_NDK)/platforms)
    endif
    $(error Android NDK does not support SDK level $(SDK_VERSION))
endif

ifeq ($(USE_DOWNLOADER),1)
    ifeq ($(shell ls -d '$(LIB_PLAY_LICENSING)' 2>/dev/null),)
        $(warning --- Google Play Licensing Library not found.)
        $(warning --- Looked in: $(LIB_PLAY_LICENSING))
        $(warning --- Make sure you have downloaded this library using the)
        $(warning --- Android SDK Manager.)
        $(error Google Play Licensing Library not found)
    endif
    ifeq ($(shell ls -d '$(LIB_PLAY_APK_EXPANSION)' 2>/dev/null),)
        $(warning --- Google Play APK Expansion Library not found.)
        $(warning --- Looked in: $(LIB_PLAY_APK_EXPANSION))
        $(warning --- Make sure you have downloaded this library using the)
        $(warning --- Android SDK Manager.)
        $(error Google Play APK Expansion Library not found)
    endif
    # https://code.google.com/p/android/issues/detail?id=37698
    ifneq ($(shell ls -d '$(LIB_PLAY_APK_EXPANSION)/src/src' 2>/dev/null),)
        $(warning --- Google Play APK Expansion Library version is too old!)
        $(warning --- Update to version 3 or later of the library.)
        $(error Google Play APK Expansion Library version too old)
    endif
endif

# Verify that SDK and target OS versions aren't too old.
ifneq ($(shell test $(SDK_VERSION) -ge 23 && echo ok),ok)
    $(warning --- Selected SDK version ($(SDK_VERSION)) is too old!)
    $(warning --- SIL requires SDK version 23 or later for building.)
    $(error SDK version too old)
endif
ifneq ($(shell test $(TARGET_OS_VERSION) -ge 10 && echo ok),ok)
    $(warning --- Minimum OS version ($(TARGET_OS_VERSION)) is too old!)
    $(warning --- SIL programs require version 10 (Android 2.3.3) or later.)
    $(error Target OS version too old)
endif

# Sanity check: make sure that the target OS version is no later than the
# SDK version.
ifneq ($(shell test $(TARGET_OS_VERSION) -le $(SDK_VERSION) && echo ok),ok)
    $(warning --- Target OS version cannot be newer than SDK version!)
    $(warning --- Target OS version: $(TARGET_OS_VERSION))
    $(warning ---       SDK version: $(SDK_VERSION))
    $(warning --- Rerun make with "TARGET_OS_VERSION=$(SDK_VERSION)" or install a)
    $(warning --- newer SDK version using the Android SDK Manager.)
    $(error Target OS version not supported by SDK)
endif

endif

#-------------------------------------------------------------------------#

# Name of the .apk file to be generated.
APK_FILENAME = $(EXECUTABLE_NAME).apk
# And escaped, so we can use it in rules.
APK_FILENAME_ESCAPED = $(subst $(preserve-space) ,\ ,$(APK_FILENAME))

# Name of the Java package as used in JNI calls.
PACKAGE_JNI = $(subst .,/,$(PACKAGE_NAME))

# Languages available for system text strings.
STRING_LANGS := $(patsubst $(_THISDIR)/strings-%.xml,%,$(shell \
    ls '$(_THISDIR)'/strings-*.xml))

# Languages available for the downloader UI.
DOWNLOADER_LANGS := $(patsubst $(_THISDIR)/downloader-strings-%.xml,%,$(shell \
    ls '$(_THISDIR)'/downloader-strings-*.xml))

# Pathnames of Android resource files (not asset files) to include.
ANDROID_RES = res/values/strings.xml \
              $(patsubst %,res/values-%/strings.xml,$(subst _,-r,$(STRING_LANGS))) \
              $(if $(ICON_PNG),res/drawable/icon.png) \
              $(if $(OUYA_ICON_PNG),res/drawable-xhdpi/ouya_icon.png) \
              $(if $(filter 1,$(USE_DOWNLOADER)),res/layout/downloader.xml) \
              $(if $(filter 1,$(USE_DOWNLOADER)),res/values/downloader-strings.xml) \
              $(if $(filter 1,$(USE_DOWNLOADER)),$(patsubst %,res/values-%/downloader-strings.xml,$(subst _,-r,$(DOWNLOADER_LANGS))))

###########################################################################
######################### Build environment setup #########################
###########################################################################

include $(_THISDIR)/../common/base.mk
include $(_THISDIR)/../common/config.mk

# The NDK include files define rules of their own, so make sure our own
# default rule really is the default.
.PHONY: _SIL_default
_SIL_default: default

#-------------------------------------------------------------------------#

# Don't try to configure the toolchain if we're not building, since we
# haven't checked the paths.  In the top-level build for all architectures,
# we configure for an arbitrary architecture, since we need the compiler
# flags when generating the Constants.java source file.

ifneq ($(filter-out help clean spotless,$(or $(MAKECMDGOALS),default)),)

_SIL_saved_TARGET_ARCH_ABI := $(TARGET_ARCH_ABI)
ifneq ($(filter all all32,$(TARGET_ARCH_ABI)),)
    override TARGET_ARCH_ABI := armeabi-v7a
else ifeq ($(TARGET_ARCH_ABI),all64)
    override TARGET_ARCH_ABI := arm64-v8a
endif

#------------------------------------#

# Toolchain system names for each Android ABI.
_TOOLCHAIN_SYSTEM_armeabi-v7a := arm-linux-androideabi
_TOOLCHAIN_SYSTEM_arm64-v8a := aarch64-linux-android
_TOOLCHAIN_SYSTEM_mips := mipsel-linux-android
_TOOLCHAIN_SYSTEM_mips64 := mips64el-linux-android
_TOOLCHAIN_SYSTEM_x86 := x86
_TOOLCHAIN_SYSTEM_x86_64 := x86_64

NDK_ROOT = $(ANDROID_NDK)
NDK_TOOLCHAIN_VERSION = clang
NDK_APPS = dummy
NDK_APP_STL = c++_static
TARGET_PLATFORM = android-$(SDK_VERSION)
include $(ANDROID_NDK)/build/core/init.mk
include $(ANDROID_NDK)/build/core/setup-imports.mk
include $(ANDROID_NDK)/build/core/setup-abi.mk

TARGET_TOOLCHAIN_VERSION := $(shell echo '$(TARGET_TOOLCHAIN)' | sed -e 's/^.*-//')

ANDROID_NDK_STL = $(ANDROID_NDK)/sources/cxx-stl/llvm-libc++
STL_CXXFLAGS = -I'$(ANDROID_NDK_STL)/$(_SIL_LIBCXX_INCLUDE)' \
               -I'$(ANDROID_NDK)/sources/android/support/include'
STL_LIBS = -L'$(ANDROID_NDK_STL)/libs/$(TARGET_ARCH_ABI)' -lc++_static

ifeq (,$(filter 14 15 16 17,$(ANDROID_NDK_VER_MAJOR)))
    TARGET_CFLAGS += $(GLOBAL_CFLAGS)
    TARGET_LDFLAGS += $(GLOBAL_LDFLAGS)
endif
TARGET_CFLAGS += --sysroot=$(SYSROOT_INC) \
                 -I'$(SYSROOT_INC)/usr/include' \
                 -I'$(ANDROID_NDK)/sources/android/native_app_glue'
ifeq (,$(filter 14,$(ANDROID_NDK_VER_MAJOR)))
    TARGET_CFLAGS += \
        -D__ANDROID_API__=$(SDK_VERSION) \
        -isystem '$(SYSROOT_INC)/usr/include/$(if $(filter x86_64,$(TARGET_ARCH_ABI)),x86_64-linux-android,$(if $(filter x86,$(TARGET_ARCH_ABI)),i686-linux-android,$(_TOOLCHAIN_SYSTEM_$(TARGET_ARCH_ABI))))'
endif
# Hide all symbols from the final shared object (except the entry point in
# src/sysdep/android/activity.c, which has an explicit visibility attribute).
TARGET_CFLAGS += -fvisibility=hidden

TARGET_CXXFLAGS = $(TARGET_CFLAGS) $(STL_CXXFLAGS)
ifneq (,$(filter 15,$(ANDROID_NDK_VER_MAJOR)))
    # Needed to work around -Wundef warnings from
    # <NDK>/sources/android/support/include/stdlib.h
    TARGET_CXXFLAGS += -D__ISO_C_VISIBLE=2011
endif

TARGET_ARCH = $(if $(filter arm%,$(TARGET_ARCH_ABI)),arm,$(TARGET_ARCH_ABI))
TARGET_GDBSERVER = $(or $(shell ls -d '$(ANDROID_NDK)/prebuilt/android-$(TARGET_ARCH)/gdbserver/gdbserver' 2>/dev/null),$(TOOLCHAIN_ROOT)/prebuilt/gdbserver)

# Architecture-specific flags:
ifeq ($(TARGET_ARCH),arm)
    ifeq ($(USE_ARM_NEON),1)
        TARGET_CFLAGS += -mfpu=neon
    endif
    # Workaround for Clang breakage in NDK r15-r16
    # (see https://github.com/android-ndk/ndk/issues/642)
    ifneq (,$(filter 15 16,$(ANDROID_NDK_VER_MAJOR)))
        TARGET_CFLAGS += -mllvm -arm-promote-constant=0
    endif
endif

#------------------------------------#

CC = $(TARGET_CC)
AR_RC = $(TARGET_AR) rc
RANLIB = $(if $(filter clang%,$(TOOLCHAIN)),true,$(patsubst %ar,%ranlib,$(TARGET_AR)))

OBJECT_EXT  = .o
LIBRARY_EXT = .a

SYS_CFLAGS    = $(TARGET_CFLAGS)
SYS_CXXFLAGS  = $(TARGET_CXXFLAGS)
SYS_OBJCFLAGS = $(TARGET_CFLAGS)
SYS_ASFLAGS   = $(TARGET_CFLAGS)
SYS_LDFLAGS   = $(TARGET_LDFLAGS)

BASE_LIBS     = $(STL_LIBS) \
                -lEGL -lGLESv2 -lOpenSLES -ljnigraphics -landroid -llog \
                -lz -lm

# Put objects for each architecture in a separate directory, so we can
# build multiple architectures side-by-side.
OBJDIR_BASE := $(OBJDIR)
OBJDIR = $(OBJDIR_BASE)-$(TARGET_ARCH_ABI)

include $(_THISDIR)/../common/toolchain.mk

# llvm-cov was removed from the NDK in r11, so we need to find it on the
# build host.
GCOV = llvm-cov

TARGET_CC_LD = $(if $(filter 1,$(SIL_LINK_CXX_STL)),$(TARGET_CXX),$(TARGET_CC))

#------------------------------------#

override TARGET_ARCH_ABI := $(_SIL_saved_TARGET_ARCH_ABI)

endif  # if not help/clean/spotless

#-------------------------------------------------------------------------#

# Other build tool pathnames.  Java tools (jarsigner and javac) are assumed
# to be in the shell's executable path.

AAPT      = $(shell ls '$(ANDROID_HOME)'/build-tools/*/aapt | tail -1)
ADB       = $(ANDROID_HOME)/platform-tools/adb
DX        = $(shell ls '$(ANDROID_HOME)'/build-tools/*/dx | tail -1)
JARSIGNER = jarsigner
# Set a sane heap size so parallel builds don't run the system out of memory.
JAVAC     = javac -J-Xmx256m
ZIPALIGN  = $(shell ls '$(ANDROID_HOME)'/build-tools/*/zipalign | tail -1)

ifeq ($(AAPT),)
    $(warning --- aapt tool not found.  Looked in:)
    $(warning ---    $(ANDROID_HOME)/build-tools/*/aapt)
    $(warning --- Make sure the Android build-tools package is installed.)
    $(error aapt not found)
endif

ifeq ($(DX),)
    $(warning --- dx tool not found.  Looked in:)
    $(warning ---    $(ANDROID_HOME)/build-tools/*/dx)
    $(warning --- Make sure the Android build-tools package is installed.)
    $(error dx not found)
endif

###########################################################################
################# Source file lists and associated flags ##################
###########################################################################

SIL_SYS_CONFIG_HEADER = android.h

SIL_SYS_SOURCES = $(SIL_OPENGL_SOURCES) \
                  sysdep/android/activity.c \
                  sysdep/android/files.c \
                  sysdep/android/graphics.c \
                  sysdep/android/input.c \
                  sysdep/android/log.c \
                  sysdep/android/main.c \
                  sysdep/android/misc.c \
                  sysdep/android/sound.c \
                  sysdep/android/sysfont.c \
                  sysdep/android/thread.c \
                  sysdep/android/userdata.c \
                  sysdep/linux/debug.c \
                  sysdep/linux/meminfo.c \
                  sysdep/misc/ioqueue.c \
                  sysdep/misc/movie-none.c \
                  sysdep/posix/condvar.c \
                  sysdep/posix/fileutil.c \
                  sysdep/posix/misc.c \
                  sysdep/posix/mutex.c \
                  sysdep/posix/semaphore.c \
                  sysdep/posix/thread.c \
                  sysdep/posix/time.c \
                  sysdep/posix/userdata.c \
                  sysdep/posix/util.c \
                  $(if $(filter 1,$(SIL_INCLUDE_TESTS)), \
                      test/sysdep/android/misc.c \
                      test/sysdep/misc/ioqueue.c \
                      test/sysdep/posix/files.c \
                      test/sysdep/posix/fileutil.c \
                      test/sysdep/posix/internal.c \
                      test/sysdep/posix/misc.c \
                      test/sysdep/posix/thread.c \
                      test/sysdep/posix/time.c \
                      test/sysdep/posix/userdata.c \
                  )

SIL_SYS_FLAGS = -DSIL_PLATFORM_ANDROID_DLOG_LOG_TAG='"$(PROGRAM_NAME)"' \
                -DSIL_PLATFORM_ANDROID_PACKAGE_NAME='"$(PACKAGE_NAME)"' \
                -DSIL_PLATFORM_ANDROID_PACKAGE_JNI='"$(PACKAGE_JNI)"' \
                $(call _if-define,USE_DOWNLOADER,SIL_PLATFORM_ANDROID_USE_DOWNLOADER) \
                $(if $(GCOV_PREFIX),-DGCOV_PREFIX='"$(GCOV_PREFIX)"') \
                $(CFLAG_DEFINE)_POSIX_C_SOURCE=200809L

include $(_THISDIR)/../common/sources.mk

_SIL_ARCH_DEFINES =
ifeq ($(TARGET_ARCH_ABI),armeabi-v7a)
    _SIL_ARCH_DEFINES = -DSIL_ARCH_ARM -DSIL_ARCH_ARM_32 -DIS_LITTLE_ENDIAN
endif
ifeq ($(TARGET_ARCH_ABI),arm64-v8a)
    _SIL_ARCH_DEFINES = -DSIL_ARCH_ARM -DSIL_ARCH_ARM_64 -DIS_LITTLE_ENDIAN
endif
ifeq ($(TARGET_ARCH_ABI),mips)
    _SIL_ARCH_DEFINES = -DSIL_ARCH_MIPS -DSIL_ARCH_MIPS_32 -DIS_LITTLE_ENDIAN
endif
ifeq ($(TARGET_ARCH_ABI),mips64)
    _SIL_ARCH_DEFINES = -DSIL_ARCH_MIPS -DSIL_ARCH_MIPS_64 -DIS_LITTLE_ENDIAN
endif
ifeq ($(TARGET_ARCH_ABI),x86)
    _SIL_ARCH_DEFINES = -DSIL_ARCH_X86 -DSIL_ARCH_X86_32 -DSIL_ARCH_X86_SSE3 \
                        -DIS_LITTLE_ENDIAN
endif
ifeq ($(TARGET_ARCH_ABI),x86_64)
    _SIL_ARCH_DEFINES = -DSIL_ARCH_X86 -DSIL_ARCH_X86_64 -DSIL_ARCH_X86_SSE3 \
                        -DIS_LITTLE_ENDIAN
endif
ifeq ($(_SIL_ARCH_DEFINES),)
    ifeq ($(filter all all32 all64,$(TARGET_ARCH_ABI)),)
        $(error Unsupported CPU architecture/ABI: $(TARGET_ARCH_ABI))
    endif
endif

SIL_EXTRA_FLAGS += $(_SIL_ARCH_DEFINES) \
                   $(CFLAG_DEFINE)SIL_PLATFORM_ANDROID_MIN_SDK_VERSION=$(TARGET_OS_VERSION)

# Suppress "visibility attribute ignored" warnings on GL function pointers.
$(SIL_DIR:$(TOPDIR)%=$(OBJDIR)%)/src/sysdep/opengl/dyngl.o: SIL_SYS_FLAGS += -Wno-attributes

# libvpx secretly relies on the cpufeatures library when building for
# Android on ARM, so add it in.
ifneq ($(_BUILD_libvpx),)
    ifneq ($(filter arm%,$(TARGET_ARCH_ABI)),)
        SIL_libvpx_CFLAGS += $(CFLAG_INCLUDE_DIR)'$(ANDROID_NDK)/sources/android/cpufeatures'
        SIL_libvpx_OBJECTS += $(OBJDIR)/cpu-features.o
    endif
endif

#-------------------------------------------------------------------------#

# Workaround for Android NDK breakage.
SIL_ndk-fix_SOURCES = $(SIL_DIR)/src/sysdep/android/ndk-fix.c
SIL_ndk-fix_CFLAGS = $(SIL_CFLAGS)
SIL_ndk-fix_GENLIB = libndk-fix
MODULES += SIL_ndk-fix

#-------------------------------------------------------------------------#

JAVA_DIR           = java
JAVA_SOURCES       = $(JAVA_DIR)/Constants.java \
                     $(JAVA_DIR)/Dialog.java \
                     $(JAVA_DIR)/Downloader.java \
                     $(JAVA_DIR)/InputDialog.java \
                     $(JAVA_DIR)/SILActivity.java \
                     $(JAVA_DIR)/SysFont.java
ifeq ($(DEBUG) $(SIL_INCLUDE_TESTS),1 1)
    JAVA_SOURCES  += $(JAVA_DIR)/RunTestsActivity.java
endif
CLASS_ROOT         = class
reverse = $(if $2,$(call reverse,$2) $1,$1)
CLASS_DIR          = $(CLASS_ROOT)/$(subst $(preserve-space) $(preserve-space),/,$(call reverse,$(subst ., ,$(PACKAGE_NAME))))
JAVA_CLASSES       = $(subst $(JAVA_DIR)/,$(CLASS_DIR)/,$(sort $(JAVA_SOURCES:%.java=%.class)))

ifeq ($(USE_DOWNLOADER),1)
    PLAY_LICENSING_CLASSES = $(patsubst $(LIB_PLAY_LICENSING)/src/%.java,$(CLASS_ROOT)/%.class,$(shell find $(LIB_PLAY_LICENSING)/src -name \*.java))
    PLAY_APK_EXPANSION_CLASSES = $(patsubst $(LIB_PLAY_APK_EXPANSION)/src/%.java,$(CLASS_ROOT)/%.class,$(shell find $(LIB_PLAY_APK_EXPANSION)/src -name \*.java))
endif

###########################################################################
############################### Build rules ###############################
###########################################################################

_SDK_LEVEL_DESC_10 = Android 2.3.3 Gingerbread
_SDK_LEVEL_DESC_11 = Android 3.0 Honeycomb
_SDK_LEVEL_DESC_12 = Android 3.1 Honeycomb MR1
_SDK_LEVEL_DESC_13 = Android 3.2 Honeycomb MR2
_SDK_LEVEL_DESC_14 = Android 4.0 Ice Cream Sandwich
_SDK_LEVEL_DESC_15 = Android 4.0.3 Ice Cream Sandwich MR1
_SDK_LEVEL_DESC_16 = Android 4.1 Jelly Bean
_SDK_LEVEL_DESC_17 = Android 4.2 Jelly Bean MR1
_SDK_LEVEL_DESC_18 = Android 4.3 Jelly Bean MR2
_SDK_LEVEL_DESC_19 = Android 4.4 KitKat
_SDK_LEVEL_DESC_20 = Android 4.4W KitKat Watch
_SDK_LEVEL_DESC_21 = Android 5.0 Lollipop
_SDK_LEVEL_DESC_22 = Android 5.1 Lollipop MR1
_SDK_LEVEL_DESC_23 = Android 6.0 Marshmallow
_SDK_LEVEL_DESC_24 = Android 7.0 Nougat
_SDK_LEVEL_DESC_25 = Android 7.1 Nougat
_SDK_LEVEL_DESC_26 = Android 8.0 Oreo
_SDK_LEVEL_DESC_27 = Android 8.1 Oreo
_SDK_LEVEL_DESC_28 = Android 9.0 Pie

ifneq ($(EXECUTABLE_NAME),)
SIL_HELP_all           = 'build the application package ($(APK_FILENAME))'
SIL_HELP_binary        = 'build just the native shared object'
SIL_HELP_install       = 'install on the default device'
SIL_HELP_install-ext   = 'install on the default device'\''s external storage'
SIL_HELP_run           = 'run on the default device (without building or installing)'
SIL_HELP_test          = 'run tests on default device (without building/installing)'
SIL_HELP_all-run       = 'build the application and run it on the default device'
SIL_HELP_all-test      = 'build the application and run tests on the default device'
SIL_HELP_debug         = 'run under GDB on the default device'
SIL_HELP_debug-test    = 'run tests under GDB on the default device'
endif
SIL_HELP_gen-coverage  = 'generate coverage.out from coverage data'
SIL_HELP_pull-coverage = 'pull coverage data from device and merge to coverage.out'
SIL_HELP_coverage-html = 'generate HTML coverage results from coverage.out'
SIL_HELP_clean         = 'remove all intermediate files and dependency data'
SIL_HELP_spotless      = 'remove all generated files, including .apk file'
define SIL_HELPTRAILER
echo ''
echo 'When using TARGET_ARCH_ABI=all (the default), the debug and debug-test'
echo 'targets assume an ARM device.  Set TARGET_ARCH=... on the make command'
echo 'line if debugging on a device with a different architecture.'
echo ''
echo 'Using Android SDK installation path (ANDROID_HOME):'
echo '    $(ANDROID_HOME)'
echo 'Using Android NDK installation path (ANDROID_NDK):'
echo '    $(or $(ANDROID_NDK),<not found>) (version $(if $(ANDROID_NDK_VER_FULL),$(patsubst r%,%,$(ANDROID_NDK_VER_FULL)),<unknown>))'
echo 'Building with SDK version        (SDK_VERSION): $(if $(SDK_VERSION),$(SDK_VERSION) ($(or $(_SDK_LEVEL_DESC_$(SDK_VERSION)),unknown Android version)),<not found>)'
echo 'Earliest supported OS      (TARGET_OS_VERSION): $(if $(TARGET_OS_VERSION),$(TARGET_OS_VERSION) ($(or $(_SDK_LEVEL_DESC_$(TARGET_OS_VERSION)),unknown Android version)),<unknown>)'
echo 'Compatibility level (TARGET_OS_VERSION_COMPAT): $(if $(TARGET_OS_VERSION_COMPAT),$(TARGET_OS_VERSION_COMPAT) ($(or $(_SDK_LEVEL_DESC_$(TARGET_OS_VERSION_COMPAT)),unknown Android version)),<unknown>)'
echo ''
endef

include $(_THISDIR)/../common/rules.mk

#-------------------------------------------------------------------------#

.PHONY: all binary install install-ext run test debug debug-test clean spotless

ifneq ($(EXECUTABLE_NAME),)

all: $(APK_FILENAME_ESCAPED)

ifneq ($(filter all all32 all64,$(TARGET_ARCH_ABI)),)

# Dummy target to force calling "make" on each arch's libnative.so.
.PHONY: _build-arch-force
_build-arch-force:

define _build-arch
libs/$1/libnative.so: _build-arch-force
	$$(Q)+$$(MAKE) '$$@' TARGET_ARCH_ABI='$1' SHOW_ARCH_IN_BUILD_MESSAGES=1
libs/$1/gdbserver:
	$$(Q)+$$(MAKE) '$$@' TARGET_ARCH_ABI='$1' SHOW_ARCH_IN_BUILD_MESSAGES=1
endef

ABIS-all = armeabi-v7a arm64-v8a $(if $(filter 14 15 16,$(ANDROID_NDK_VER_MAJOR)),mips mips64) x86 x86_64
ABIS-all32 = armeabi-v7a $(if $(filter 14 15 16,$(ANDROID_NDK_VER_MAJOR)),mips) x86
ABIS-all64 = arm64-v8a $(if $(filter 14 15 16,$(ANDROID_NDK_VER_MAJOR)),mips64) x86_64

$(foreach arch,$(ABIS-$(TARGET_ARCH_ABI)),$(eval $(call _build-arch,$(arch))))

binary: $(foreach arch,$(ABIS-$(TARGET_ARCH_ABI)),libs/$(arch)/libnative.so libs/$(arch)/gdbserver)

else  # single arch

binary: libs/$(TARGET_ARCH_ABI)/libnative.so libs/$(TARGET_ARCH_ABI)/gdbserver

endif

install:
	$(ECHO) 'Installing to default device'
	$(Q)$(ADB) install -r '$(APK_FILENAME)'

install-ext:
	$(ECHO) 'Installing to external storage on default device'
	$(Q)$(ADB) install -r -s '$(APK_FILENAME)'

run:
	$(ECHO) 'Running on default device'
	$(Q)$(ADB) shell am start -a android.intent.action.MAIN -n '$(PACKAGE_NAME)/.$(MAIN_ACTIVITY)'

test:
	$(ECHO) 'Running tests on default device'
	$(Q)$(ADB) shell am start -a '$(PACKAGE_NAME).action.RUN_TESTS' -n '$(PACKAGE_NAME)/.RunTestsActivity'

# These need to be done in sequence even for a parallel build, so we list
# them as commands instead of prerequisites.
all-run:
	$(MAKE) all
	$(MAKE) install
	$(MAKE) run

all-test:
	$(MAKE) all
	$(MAKE) install
	$(MAKE) test

debug:
	$(ECHO) 'Running under GDB on default device'
	$(Q)ANDROID_NDK_ROOT='$(ANDROID_NDK)' ADB='$(ADB)' TARGET_ARCH='$(if $(filter all arm%,$(TARGET_ARCH_ABI)),arm,$(TARGET_ARCH_ABI))' '$(_THISDIR)/run-gdb' '$(PACKAGE_NAME)'

debug-test:
	$(ECHO) 'Running tests under GDB on default device'
	$(Q)ANDROID_NDK_ROOT='$(ANDROID_NDK)' ADB='$(ADB)' TARGET_ARCH='$(if $(filter all arm%,$(TARGET_ARCH_ABI)),arm,$(TARGET_ARCH_ABI))' '$(_THISDIR)/run-gdb' -t '$(PACKAGE_NAME)'

endif  # ifneq ($(EXECUTABLE_NAME),)


clean:
	$(ECHO) 'Removing object files'
	$(Q)rm -rf class java libs obj-*
ifneq ($(EXECUTABLE_NAME),)
	$(ECHO) 'Removing generated files'
	$(Q)rm -rf assets/dummy.bin assets/testdata res AndroidManifest.xml classes.dex
	$(ECHO) 'Removing temporary files'
	$(Q)rm -rf '$(TMP)$(APK_FILENAME:%.apk=%.ap_)' '$(TMP)$(APK_FILENAME:%.apk=%.a_k)' '$(TMP)$(APK_FILENAME:%.apk=%._pk)' .covtmp
endif
	$(SIL_RECIPE_clean)

spotless: clean
ifneq ($(EXECUTABLE_NAME),)
	$(ECHO) 'Removing application files'
	$(Q)rm -rf '$(APK_FILENAME)' assets
endif
	$(ECHO) 'Removing coverage data'
	$(Q)rm -rf coverage coverage.out
	$(_SIL_TOOLS_RECIPE_spotless)
	$(SIL_RECIPE_spotless)

#-------------------------------------------------------------------------#

ifneq ($(EXECUTABLE_NAME),)  # To the end of the file.

.PHONY: pull-coverage

pull-coverage:
	$(ECHO) 'Retrieving coverage data'
	$(Q)set -e; \
	    device_obj="`adb shell 'cd \"$(GCOV_PREFIX)$(abspath .)\" && echo *' | sed -e 's/\r//g'`"; \
	    if test -n "$$device_obj"; then \
	        adb pull "$(GCOV_PREFIX)$(abspath .)/$$device_obj" "$$device_obj"; \
	        $(MAKE) gen-coverage OBJDIR="$$device_obj"; \
	    else \
	        echo >&2 'Failed to find coverage output files'; \
	        false; \
	    fi

#-------------------------------------------------------------------------#

$(APK_FILENAME_ESCAPED): prepare-package
	$(ECHO) 'Packaging $@'
	@# aapt doesn't (currently) have a flag to specify a path _prefix_
	@# (as opposed to file suffix) for disabling compression, so we just
	@# disable compression for everything to ensure raw assets are
	@# available for FD opening.
	$(Q)'$(AAPT)' package -f --auto-add-overlay \
	    -I '$(ANDROID_SDK)/android.jar' \
	    -M AndroidManifest.xml \
	    -A assets -0 '' \
	    -S res \
	    $(if $(filter 1,$(USE_DOWNLOADER)),-S '$(LIB_PLAY_APK_EXPANSION)/res') \
	    -F '$(TMP)$(@:%.apk=%.ap_)'
	@# apkbuilder is officially deprecated, so use a local copy.
	$(Q)java -Xmx128M -classpath '$(ANDROID_HOME)/tools/lib/sdklib.jar:$(_THISDIR)/.' ApkBuilderMain '$(TMP)${@:%.apk=%.a_k}' -v -z '$(TMP)${@:%.apk=%.ap_}' -f classes.dex -nf libs $(if $(wildcard libs/*/gdbserver),-d) -u
	$(Q)if test '1' = '$(SIGN)'; then \
		'$(JARSIGNER)' -sigalg SHA1withRSA -digestalg SHA1 -keystore '$(SIGN_KEYSTORE)' -storepass '$(SIGN_STOREPASS)' -keypass '$(SIGN_KEYPASS)' -signedjar '$(TMP)${@:%.apk=%._pk}' '$(TMP)${@:%.apk=%.a_k}' '$(SIGN_ALIAS)'; \
		'$(ZIPALIGN)' -f 4 '$(TMP)${@:%.apk=%._pk}' '$@'; \
	else \
		cp -p '$(TMP)${@:%.apk=%.a_k}' '$@'; \
	fi
	$(Q)rm -f '$(TMP)${@:%.apk=%.ap_}' '$(TMP)${@:%.apk=%.a_k}' '$(TMP)${@:%.apk=%._pk}'

.PHONY: prepare-package
prepare-package: binary classes resources AndroidManifest.xml
	$(Q)if ! fgrep -q 'android:debuggable="true"' AndroidManifest.xml; then \
	    rm -f libs/*/gdbserver; \
	fi

.PHONY: classes
classes: classes.dex

.PHONY: resources
resources: $(RESOURCES:%=assets/%) $(ANDROID_RES) assets/dummy.bin \
           $(if $(and $(filter 1,$(DEBUG)),$(filter 1,$(SIL_INCLUDE_TESTS))),assets/testdata)

$(RESOURCES:%=assets/%) : assets/%: %
	$(ECHO) 'Copying $< into package'
	$(Q)mkdir -p '$(@D)'
	$(Q)cp -a '$<' '$(@D)/'
	$(Q)touch '$@'

#-------------------------------------------------------------------------#

# Sort objects in lexical order to make it easier to estimate build progress.
libs/$(TARGET_ARCH_ABI)/libnative.so: $(sort $(ALL_OBJECTS))
	$(ECHO) 'Linking $@'
	$(Q)mkdir -p '$(@D)'
	$(Q)$(TARGET_CC_LD) \
	    $(BASE_LDFLAGS) $(ALL_LDFLAGS) $(LDFLAGS) \
	    -Wl,-soname,'$(@F)' \
	    -Wl,--no-undefined \
	    -shared \
	    --sysroot='$(SYSROOT_LINK)' \
	    $(ALL_OBJECTS) \
	    $(BASE_LIBS) $(ALL_LIBS) $(LIBS) \
	    $(CFLAG_LINK_OUTPUT)'$@'

libs/$(TARGET_ARCH_ABI)/gdbserver: $(TARGET_GDBSERVER)
	$(ECHO) 'Copying $@ from $<'
	$(Q)mkdir -p '$(@D)'
	$(Q)cp -pf '$<' '$@'

#-------- libcpufeatures rules --------#

$(OBJDIR)/cpu-features.o: $(ANDROID_NDK)/sources/android/cpufeatures/cpu-features.c \
                          $(ANDROID_NDK)/sources/android/cpufeatures/cpu-features.h
	$(ECHO) 'Compiling $< to $@'
	$(Q)$(CC) $(BASE_CFLAGS) $(CFLAGS) $(CFLAG_OUTPUT)'$@' $(CFLAG_COMPILE) '$<'

#-------- Java build rules and dependencies --------#

classes.dex: $(JAVA_CLASSES)
	$(ECHO) 'Generating $@'
	$(Q)$(DX) --dex --output='$@' '$(CLASS_ROOT)'

$(JAVA_CLASSES) $(CLASS_DIR)/R.class : $(CLASS_DIR)/%.class: $(JAVA_DIR)/%.java $(MAKEFILE_DEPS)
	$(ECHO) 'Compiling $(<:$(TOPDIR)/%=%)'
	$(Q)mkdir -p '$(@D)'
	$(Q)$(JAVAC) \
	    -target 1.5 \
	    -bootclasspath '$(ANDROID_SDK)/android.jar' \
	    -classpath '$(CLASS_ROOT)' \
	    -encoding UTF-8 \
	    -g \
	    -source 1.5 \
	    -d '$(CLASS_ROOT)' \
	    -Xlint:all \
	    $(-Werror) \
	    '$<'

ifeq ($(USE_DOWNLOADER),1)
    $(CLASS_DIR)/Downloader.class: $(CLASS_DIR)/Constants.class $(CLASS_DIR)/R.class $(PLAY_LICENSING_CLASSES) $(PLAY_APK_EXPANSION_CLASSES)
endif
$(CLASS_DIR)/SILActivity.class: $(CLASS_DIR)/Constants.class $(CLASS_DIR)/Downloader.class $(CLASS_DIR)/Dialog.class $(CLASS_DIR)/InputDialog.class $(CLASS_DIR)/R.class
$(CLASS_DIR)/RunTestsActivity.class: $(CLASS_DIR)/SILActivity.class

#-------- Android library build rules --------#

# Build the libraries using a single command, so we don't have to try and
# figure out their interdependencies.  In each case, we make all classes
# depend on a single class of the set to avoid running the recipe multiple
# times in parallel.  Since we also need to patch out bugs in the library
# sources, that single class further depends on its locally generated
# source file, whose recipe takes care of the patching.

$(wordlist 2,$(words $(PLAY_LICENSING_CLASSES)),$(PLAY_LICENSING_CLASSES)) : \
    $(CLASS_ROOT)/%.class: $(word 1,$(PLAY_LICENSING_CLASSES))

$(word 1,$(PLAY_LICENSING_CLASSES)): \
    $(patsubst $(CLASS_ROOT)/%.class,$(JAVA_DIR)/%.java,$(word 1,$(PLAY_LICENSING_CLASSES))) \
    $(MAKEFILE_DEPS)
	$(ECHO) 'Compiling Google Play Licensing Library'
	$(Q)mkdir -p '$(@D)'
	$(Q)$(JAVAC) \
	    -target 1.5 \
	    -bootclasspath '$(ANDROID_SDK)/android.jar' \
	    -classpath '$(CLASS_ROOT)' \
	    -encoding UTF-8 \
	    -g \
	    -source 1.5 \
	    -d '$(CLASS_ROOT)' \
	    $(PLAY_LICENSING_CLASSES:$(CLASS_ROOT)/%.class=$(JAVA_DIR)/%.java)

$(patsubst $(CLASS_ROOT)/%.class,$(JAVA_DIR)/%.java,$(word 1,$(PLAY_LICENSING_CLASSES))): \
    $(patsubst $(CLASS_ROOT)/%.class,$(LIB_PLAY_LICENSING)/src/%.java,$(word 1,$(PLAY_LICENSING_CLASSES)))
	$(ECHO) 'Patching Google Play Licensing Library'
	$(Q)cp -a '$(LIB_PLAY_LICENSING)/src/com' '$(JAVA_DIR)/'
	$(Q)cd '$(JAVA_DIR)' && patch -fsp3 <'$(_THISDIR)/play-licensing-fixes.diff'

# For the APK expansion library, we have to generate the resource class
# R.java, so we use that as the singleton target.

$(PLAY_APK_EXPANSION_CLASSES) : \
    $(CLASS_ROOT)/%.class: $(CLASS_ROOT)/com/google/android/vending/expansion/downloader/R.class

$(CLASS_ROOT)/com/google/android/vending/expansion/downloader/R.class: \
    $(JAVA_DIR)/com/google/android/vending/expansion/downloader/R.java \
    $(PLAY_LICENSING_CLASSES) $(MAKEFILE_DEPS)
	$(ECHO) 'Compiling Google Play APK Expansion Library'
	$(Q)mkdir -p '$(@D)'
	$(Q)$(JAVAC) \
	    -target 1.5 \
	    -bootclasspath '$(ANDROID_SDK)/android.jar' \
	    -classpath '$(CLASS_ROOT)' \
	    -encoding UTF-8 \
	    -g \
	    -source 1.5 \
	    -d '$(CLASS_ROOT)' \
	    '$<' \
	    $(PLAY_APK_EXPANSION_CLASSES:$(CLASS_ROOT)/%.class=$(JAVA_DIR)/%.java)

$(JAVA_DIR)/com/google/android/vending/expansion/downloader/R.java: $(JAVA_DIR)/R.java
	$(ECHO) 'Patching Google Play APK Expansion Library'
	$(Q)cp -a '$(LIB_PLAY_APK_EXPANSION)/src/com' '$(JAVA_DIR)/'
	$(Q)cd '$(JAVA_DIR)' && patch -fsp4 <'$(_THISDIR)/play-apk-expansion-fixes.diff'
	$(Q)set -e; for f in `find $(JAVA_DIR)/com -name \*.java`; do \
	    sed -e 's/\(import com\.\)\(android\.vending\.expansion\.downloader\.R;\)/\1google.\2/' <"$$f" >"$$f~"; \
	    mv "$$f~" "$$f"; \
	done
	$(ECHO) 'Generating $@'
	@# Technically we could generate this at the same time as the top-level
	@# R.java, but that breaks dependency calculations in various ways.
	$(Q)$(AAPT) package -f -m --auto-add-overlay \
	    -I '$(ANDROID_SDK)/android.jar' \
	    -M AndroidManifest.xml \
	    -S res \
	    $(if $(filter 1,$(USE_DOWNLOADER)),-S '$(LIB_PLAY_APK_EXPANSION)/res') \
	    $(if $(filter 1,$(USE_DOWNLOADER)),--extra-packages com.google.android.vending.expansion.downloader) \
	    -J '$(JAVA_DIR)'
	$(Q)rm '$(subst $(CLASS_ROOT),$(JAVA_DIR),$(CLASS_DIR))/R.java'

#-------- Java source generation rules --------#

$(JAVA_DIR)/%.java: $(SIL_DIR)/src/sysdep/android/%.java $(MAKEFILE_DEPS)
	$(ECHO) 'Generating $@'
	$(Q)mkdir -p '$(@D)'
	$(Q)sed \
	    -e 's/com.example.sil_app/$(PACKAGE_NAME)/g' \
	    <'$<' >'$@'

_expand-boolean = $(CFLAG_DEFINE)$1=$(if $(filter 1,$($1)),true,false)
_expand-bytearray = $(CFLAG_DEFINE)$1=$(if $($1),'new byte[]{$($1)}',null)
_expand-string = $(CFLAG_DEFINE)$1=$(if $($1),'"$($1)"',null)

$(JAVA_DIR)/Constants.java: $(SIL_DIR)/src/sysdep/android/Constants.java $(MAKEFILE_DEPS)
	$(ECHO) 'Generating $@'
	$(Q)mkdir -p '$(@D)'
	$(Q)export flags=(); \
	for flag in $(BASE_CFLAGS) $(SIL_CFLAGS) $(EXTRA_CFLAGS) $(CFLAGS) \
	    $(call _expand-string,DOWNLOADER_BASE64_PUBLIC_KEY) \
	    $(call _expand-bytearray,DOWNLOADER_SALT) \
	    $(call _expand-boolean,USE_DOWNLOADER) \
	; do \
	    case $$flag in \
	        $(CFLAG_DEFINE)*) flags+=("$$flag");; \
	    esac; \
	done; \
	perl -p \
	    -e 's/com.example.sil_app/$(PACKAGE_NAME)/g;' \
	    -e 's/^(public static final \S+) (\S+) =.*;/$$1 _C_$$2 = $$2;/' \
	    <'$<' \
	    | cpp "$${flags[@]}" \
	    | grep -v '^#' \
	    | sed \
	          -e 's/_C_\([^ ]*\) = \1;/\1 = 0;/' \
	          -e 's/_C_//' \
	    >'$@'

ifneq ($(USE_DOWNLOADER),1)
$(JAVA_DIR)/Downloader.java: $(SIL_DIR)/src/sysdep/android/Downloader-dummy.java $(MAKEFILE_DEPS)
	$(ECHO) 'Generating $@'
	$(Q)mkdir -p '$(@D)'
	$(Q)sed \
	    -e 's/com.example.sil_app/$(PACKAGE_NAME)/g' \
	    <'$<' >'$@'
endif

$(JAVA_DIR)/R.java: AndroidManifest.xml $(ANDROID_RES) \
    $(MAKEFILE_DEPS)
	$(ECHO) 'Generating $@'
	$(Q)$(AAPT) package -f -m --auto-add-overlay \
	    -I '$(ANDROID_SDK)/android.jar' \
	    -M AndroidManifest.xml \
	    -S res \
	    $(if $(filter 1,$(USE_DOWNLOADER)),-S '$(LIB_PLAY_APK_EXPANSION)/res') \
	    -J '$(JAVA_DIR)'
	$(Q)mv -f '$(subst $(CLASS_ROOT),$(JAVA_DIR),$(CLASS_DIR))/R.java' '$(JAVA_DIR)/R.java'

#-------------------------------------------------------------------------#

define _copy-file
$(ECHO) 'Copying $2 from $1'
$(Q)mkdir -p '$(dir $2)'
$(Q)cp -p '$1' '$2'
$(Q)touch '$2'
endef

# Dummy file for asset path lookup hack (see resolve_asset_path() in
# sysdep/android/files.c).
assets/dummy.bin:
	$(ECHO) 'Creating $@'
	$(Q)mkdir -p '$(@D)'
	$(Q)touch '$@'

assets/testdata: $(SIL_DIR)/testdata
	$(ECHO) 'Copying $@ from $<'
	@# Delete the old directory so removed files don't hang around.
	$(Q)rm -rf '$@'
	$(Q)mkdir -p '$@'
	$(Q)cp -a '$<'/* '$@/'

res/drawable/icon.png: $(ICON_PNG)
	$(call _copy-file,$<,$@)

res/drawable-xhdpi/ouya_icon.png: $(OUYA_ICON_PNG)
	$(call _copy-file,$<,$@)

res/layout/downloader.xml: $(_THISDIR)/downloader-layout.xml
	$(call _copy-file,$<,$@)

res/values/downloader-strings.xml: $(_THISDIR)/downloader-strings.xml
	$(call _copy-file,$<,$@)

# $(call _copy-file) doesn't work properly as a nested call, so we copy
# the recipe here.

define _strings-localized-recipe
res/values-$2/strings.xml: $(_THISDIR)/strings-$1.xml
	$(ECHO) 'Copying $$@ from $$<'
	$(Q)mkdir -p '$$(dir $$@)'
	$(Q)cp -p '$$<' '$$@'
	$(Q)touch '$$@'
endef
$(foreach lang,$(STRING_LANGS),$(eval \
    $(call _strings-localized-recipe,$(lang),$(subst _,-r,$(lang)))))

define _downloader-strings-localized-recipe
res/values-$2/downloader-strings.xml: $(_THISDIR)/downloader-strings-$1.xml
	$(ECHO) 'Copying $$@ from $$<'
	$(Q)mkdir -p '$$(dir $$@)'
	$(Q)cp -p '$$<' '$$@'
	$(Q)touch '$$@'
endef
$(foreach lang,$(DOWNLOADER_LANGS),$(eval \
    $(call _downloader-strings-localized-recipe,$(lang),$(subst _,-r,$(lang)))))

#-------------------------------------------------------------------------#

define _xml-recipe
$(ECHO) 'Generating $@'
$(Q)mkdir -p '$(@D)'
$(Q)sed \
        -e 's/@APP_NAME@/$(PROGRAM_NAME)/g' \
        -e 's/@CONFIG_CHANGES@/$(CONFIG_CHANGES)/g' \
        -e 's/@DEBUGGABLE@/$(if $(filter 1,$(DEBUGGABLE)),true,false)/g' \
        -e 's/@DOWNLOADER_MANIFEST_ACTIVITY@/$(subst /,\/,$(DOWNLOADER_MANIFEST_ACTIVITY))/g' \
        -e 's/@DOWNLOADER_MANIFEST_GLOBAL@/$(subst /,\/,$(DOWNLOADER_MANIFEST_GLOBAL))/g' \
        -e 's/@GL_ES_VERSION@/0x00020000/g' \
        -e 's/@ICON_ATTRIBUTE@/$(if $(ICON_PNG),android:icon="@drawable\/icon")/g' \
        -e 's/@INTENT_CATEGORIES_EXPANDED@/$(foreach i,$(sort $(INTENT_CATEGORIES)),<category android:name="$i"\/>)/g' \
        -e 's/@MAIN_ACTIVITY@/$(MAIN_ACTIVITY)/g' \
        -e 's/@MANIFEST_APPLICATION_EXTRA@/$(subst /,\/,$(subst ','\'',$(MANIFEST_APPLICATION_EXTRA)))/g' \
        -e 's/@MANIFEST_GLOBAL_EXTRA@/$(subst /,\/,$(subst ','\'',$(MANIFEST_GLOBAL_EXTRA)))/g' \
        -e 's/@MANIFEST_PERMISSIONS@/$(subst > <,>\n    <,$(subst /,\/,$(strip $(MANIFEST_PERMISSIONS))))/g' \
        -e 's/@PACKAGE_NAME@/$(PACKAGE_NAME)/g' \
        -e 's/@PROGRAM_VERSION@/$(PROGRAM_VERSION)/g' \
        -e 's/@PROGRAM_VERSION_CODE@/$(PROGRAM_VERSION_CODE)/g' \
        -e 's/@SCREEN_ORIENTATION@/$(SCREEN_ORIENTATION)/g' \
        -e 's/@SCREEN_ORIENTATION_FULL@/$(SCREEN_ORIENTATION_FULL)/g' \
        -e 's/@SDK_VERSION@/$(SDK_VERSION)/g' \
        -e 's/@TARGET_OS_VERSION@/$(TARGET_OS_VERSION)/g' \
        -e 's/@TARGET_OS_VERSION_COMPAT@/$(TARGET_OS_VERSION_COMPAT)/g' \
        <'$<' >'$@'
endef

# Always regenerate AndroidManifest.xml so we pick up the proper $SOURCE_REV.
.PHONY: AndroidManifest.xml
AndroidManifest.xml : %: $(_THISDIR)/%.in $(MAKEFILE_DEPS)
	$(_xml-recipe)

res/values/strings.xml : res/values/%: $(_THISDIR)/%.in $(MAKEFILE_DEPS)
	$(_xml-recipe)


endif  # ifneq ($(EXECUTABLE_NAME),)

###########################################################################
###########################################################################
